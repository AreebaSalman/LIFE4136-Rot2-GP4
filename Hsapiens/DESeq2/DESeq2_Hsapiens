library("DESeq2")
library(ggplot2)
library(ggrepel)
library("vsn") # transform data according to variance
library("RColorBrewer") # For colouring heatmap
library("pheatmap") # for heatmap
library(tidyverse)

# Clear environment
rm(list=ls())

# Load in sample matrix and coldata 
count_data=read.table("C:/Users/leahe/Documents/LIFE4136_group_project/Project2/hsapiens/countmatrix.txt", row.names = 1)
colnames(count_data) <- c("ERR1404760",	"ERR1404761",	"ERR1404762",	"ERR1404763",	"ERR1404764",	"ERR1404765",	"ERR1404766",	"ERR1404767",	"ERR1404768",	"ERR1404769",	"ERR1404770",	"ERR1404771",	"ERR1404772",	"ERR1404773",	"ERR1404774",	"ERR1404781",	"ERR1404782",	"ERR1404783",	"ERR1404784")
condition = read.csv("C:/Users/leahe/Documents/LIFE4136_group_project/Project2/hsapiens/coldata.csv", header = TRUE, row.names = 1) # set sample as row name and keep column titles

dds <- DESeqDataSetFromMatrix(countData = count_data, # htseq data in correct format (col names present and rownames are the gene names)
                              colData = condition, # csv file which explains what condition each column in the count data should be (column format is sample name(Animal1-5, Invitro1-5), condition (Animal, Invitro) )
                              design = ~ condition)
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
# Differential expression analysis
res <- results(dds, name="condition_Hepatocarcinoma_vs_Adenocarcinoma")

# P-values and adj-pvalues
resOrdered <- res[order(res$padj),]
summary(res) # Summary of adjusted pvalues FOR ALL SAMPLES
lfc_resOrdered <- resLFC[order(resLFC$padj),]
summary(resLFC) # Summary of adjusted pvalues FOR ALL SAMPLES (shrunken data)


# How many adjusted p-values were less than 0.01 FOR ALL SAMPLES?
sum(res$padj < 0.01, na.rm=TRUE) # 7214

# alpha = FDR cut off. alpha default = 0.1 
res05 <- results(dds, alpha=0.01)
summary(res05)
sum(res05$padj < 0.01, na.rm=TRUE) # 7255 genes less than 0.01 significance

# MA plot 
plotMA(res, alpha = 0.01, ylim=c(-30,30))

# Heatmap of the sample-to-sample distances
vsd <- vst(dds, blind=FALSE)
sampleDists <- dist(t(assay(vsd)))
head(assay(vsd), 3) # "extract the matrix of normalized values" - from deseq tutorial
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(colnames(assay(vsd)))
colnames(sampleDistMatrix) <- paste(colnames(assay(vsd)))
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)


# PCA with customisation
pcaData <- plotPCA(vsd, intgroup=c("condition"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=condition)) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) +
  geom_text_repel(aes(label=colnames(assay(vsd))), size=3, force=30, color="black", max.overlaps = 20)

# Volcano plot made manually
# Categorise differentially expressed genes
# Subset data
volcano <- data.frame(res@rownames, res$padj, res$log2FoldChange)
# Rename columns
colnames(volcano) <- c("Gene", "padj", "log2FoldChange")
volcano <- na.omit(volcano) # remove rows with NAs
volcano$diffexpressed <- "NO"
volcano

# if log2Foldchange > 0.6 and pvalue < 0.05, set as "UP" 
volcano$diffexpressed[volcano$log2FoldChange > 0.6 & volcano$padj < 0.05] <- "UP"
# if log2Foldchange < -0.6 and pvalue < 0.05, set as "DOWN"
volcano$diffexpressed[volcano$log2FoldChange < -0.6 & volcano$padj < 0.05] <- "DOWN"

# Create a new column "delabel" to de, that will contain the name of the top 20 differentially expressed genes (NA in case they are not)
volcano$label <- ifelse(volcano$Gene %in% head(volcano[order(volcano$padj), "Gene"], 20), volcano$Gene, NA)

# Plot volcano plot
ggplot(data=volcano, aes(x=log2FoldChange, y=-log10(padj), col=diffexpressed, label=label)) +
  geom_point() + 
  theme_minimal() +
  scale_color_manual(values=c("blue", "black", "red"),
                     labels=c("Downregulated", "Not significant", "Upregulated")) +
  geom_vline(xintercept=c(-0.6, 0.6), col="red") +
  geom_hline(yintercept=-log10(0.05), col="red") +
  ylim(-5, 350) +
  xlim(-25, 25) +
  geom_text_repel(max.overlaps = Inf, size=3) # To show all labels 

# Get table of the top 20 significant genes
siggenes <- na.omit(volcano)
down_siggenes <- subset(siggenes, diffexpressed=="DOWN")
up_siggenes <- subset(siggenes, diffexpressed=="UP")
print(siggenes$label)

# Order volcano by significance (smallest padj values at the top) to get ordered gene names for GORILLA
ordered_genes <- volcano[,c("Gene", "padj")]
ordered_genes <- ordered_genes[order(ordered_genes$padj),]
order_genenames <- ordered_genes[,"Gene"]
write.table(order_genenames, "C:/Users/leahe/Documents/LIFE4136_group_project/Project2/hsapiens/ordered_genenames.txt", row.names=FALSE)